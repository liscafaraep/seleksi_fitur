{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data Mining . . Nama : Liscafara Eldyar Pratiwi NIM : 180411100034 Mata Kuliah : Penambangan Data 5B Dosen : Mulaab S.Si. M.Kom . . Repository tugas penambangan data . . . Still learn, learn, and learn. Never give up!:)","title":"Home"},{"location":"#data-mining","text":". . Nama : Liscafara Eldyar Pratiwi NIM : 180411100034 Mata Kuliah : Penambangan Data 5B Dosen : Mulaab S.Si. M.Kom . . Repository tugas penambangan data . . . Still learn, learn, and learn. Never give up!:)","title":"Data Mining"},{"location":"tugas1/","text":"TUGAS 1 Statistika Deskriptif Mean Mean adalah nilai rata-rata dari beberapa buah data. Nilai mean dapat ditentukan dengan membagi jumlah data dengan banyaknya data. Mean (rata-rata) merupakan suatu ukuran pemusatan data. Mean suatu data juga merupakan statistik karena mampu menggambarkan bahwa data tersebut berada pada kisaran mean data tersebut. Mean tidak dapat digunakan sebagai ukuran pemusatan untuk jenis data nominal dan ordinal. Berdasarkan definisi dari mean adalah jumlah seluruh data dibagi dengan banyaknya data. Dengan kata lain jika kita memiliki N data sebagai berikut maka mean data tersebut dapat kita tuliskan sebagai berikut : Dimana: x = data ke n x bar = x rata-rata = nilai rata-rata sampel n = banyaknya data Bisa juga Menghitung mean a) Rumus Mean Hitung dari Data Tunggal b) Rumus Mean Hitung Untuk Data yang Disajikan Dalam Distribusi Frekuensi* Dengan : fixi = frekuensi untuk nilai xi yang bersesuaian xi = data ke-i c) Rumus Mean Hitung Gabungan Median Median menentukan letak tengah data setelah data disusun menurut urutan nilainya. Bisa juga nilai tengah dari data-data yang terurut . Simbol untuk median adalah Me. Dengan median Me, maka 50% dari banyak data nilainya paling tinggi sama dengan Me, dan 50% dari banyak data nilainya paling rendah sama dengan Me. Dalam mencari median, dibedakan untuk banyak data ganjil dan banyak data genap. Untuk banyak data ganjil, setelah data disusun menurut nilainya, maka median Me adalah data yang terletak tepat di tengah. Median bisa dihitung menggunakan rumus sebagai berikut: variansi merupakan salah satu ukuran sebaran yang paling sering digunakan dalam berbagai analisis statistika. Standar deviasi merupakan akar kuadrat positif dari variansi. Secara umum, variansi dirumuskun sabagai : Contoh: Dari lima kali kuiz statistika, seorang mahasiswa memperoleh nilai 82, 93, 86, 92, dan 79. Tentukan median populasi ini. jawab: Setelah data disusun dari yang terkecil sampai terbesar, diperoleh 79 82 86 92 93 Oleh karena itu medianya adalah 86 Kada nikotin yang berasal dari sebuah contoh acak enam batang rokok cap tertentu adalah 2.3, 2.7, 2.5, 2.9, 3.1, dan 1.9 miligram. Tentukan mediannya. jawab: Bila kadar nikotin itu diurutkan dari yang terkecil sampai terbesar, maka diperoleh 1.9 2.3 2.5 2.7 2.9 3.1 Maka mediannya adalah rata-rata dari 2.5 dan 2.7, yaitu Selain itu juga dapat dicari median dari data yang telah tersusun dalam bentuk distribusi frekuensi . Rumus yang digunakan ada dua, yaitu Dimana : Bak = batas kelas atas median c = lebar kelas s\u2019 = selisih antara nomor frekuensi median dengan frekuensi kumulatif sampai kelas median fM = frekuensi kelas median Sebelum menggunakan kedua rumus di atas, terlebih dahulu harus ditentukan kelas yang menjadi kelas median . Kelas median adalah kelas yang memuat nomor frekuensi median, dan nomor frekuensi median ini ditentukan dengan membagi keseluruhan data dengan dua. Modus Modus adalah nilai yang sering muncul. Jika kita tertarik pada data frekuensi, jumlah dari suatu nilai dari kumpulan data, maka kita menggunakan modus. Modus sangat baik bila digunakan untuk data yang memiliki sekala kategorik yaitu nominal atau ordinal. Sedangkan data ordinal adalah data kategorik yang bisa diurutkan, misalnya kita menanyakan kepada 100 orang tentang kebiasaan untuk mencuci kaki sebelum tidur, dengan pilihan jawaban: selalu (5), sering (4), kadang-kadang(3), jarang (2), tidak pernah (1). Apabila kita ingin melihat ukuran pemusatannya lebih baik menggunakan modus yaitu yaitu jawaban yang paling banyak dipilih, misalnya sering (2). Berarti sebagian besar orang dari 100 orang yang ditanyakan menjawab sering mencuci kaki sebelum tidur. Inilah cara menghitung modus: Data yang belum dikelompokkan Modus dari data yang belum dikelompokkan adalah ukuran yang memiliki frekuensi tertinggi. Modus dilambangkan mo. Data yang telah dikelompokkan Rumus Modus dari data yang telah dikelompokkan dihitung dengan rumus: Dengan : Mo = Modus L = Tepi bawah kelas yang memiliki frekuensi tertinggi (kelas modus) i = Interval kelas b1 = Frekuensi kelas modus dikurangi frekuensi kelas interval terdekat sebelumnya b2 = frekuensi kelas modus dikurangi frekuensi kelas interval terdekat sesudahnya Contoh: Sumbangan dari warga Bogor pada hari Palang Merah Nasional tercatat sebagai berikut: Rp 9.000, Rp 10.000, Rp 5.000, Rp 9.000, Rp 9.000, Rp 7.000, Rp 8.000, Rp 6.000, Rp 10.000, Rp 11.000. Maka modusnya, yaitu nilai yang terjadi dengan frekuensi paling tinggi, adalah Rp 9.000. Dari dua belas pelajar sekolah lanjutan tingkat atas yang diambil secara acak dicatat berapa kali mereka menonton film selama sebulan lalu. Data yang diperoleh adalah 2, 0, 3, 1, 2, 4, 2, 5, 4, 0, 1 dan 4. Dalam kasus ini terdapat dua modu, yaitu 2 dan 4, karena 2 dan 4 terdapat dengan frekuensi tertinggi. Distribusi demikian dikatakan bimodus. Standar defiasi Standar Deviasi dan Varians Salah satu teknik statistik yg digunakan untuk menjelaskan homogenitas kelompok. Varians merupakan jumlah kuadrat semua deviasi nilai-nilai individual thd rata-rata kelompok. Sedangkan akar dari varians disebut dengan standar deviasi atau simpangan baku. Standar Deviasi dan Varians Simpangan baku merupakan variasi sebaran data. Semakin kecil nilai sebarannya berarti variasi nilai data makin sama Jika sebarannya bernilai 0, maka nilai semua datanya adalah sama. Semakin besar nilai sebarannya berarti data semakin bervariasi. Cara penulisan rumus fungsi standar deviasi STDEV (number1, number2,\u2026) Dengan : Number1, number2, \u2026 adalah 1-255 argumen yang sesuai dengan sampel populasi. Anda juga dapat menggunakan array tunggal atau referensi ke array, bukan argumen yang dipisahkan oleh koma. Keterangan a. STDEV mengasumsikan bahwa argumen adalah contoh dari populasi. Jika data anda mewakili seluruh populasi, untuk menghitung deviasi standar menggunakan STDEVP. b. Standar deviasi dihitung menggunakan metode \u201cn-1\u2033 . c. Argumen dapat berupa nomor atau nama, array, atau referensi yang mengandung angka. d. Nilai-nilai logis dan representasi teks dari nomor yang Anda ketik langsung ke daftar argumen akan dihitung. e. Jika argumen adalah sebuah array atau referensi, hanya nomor/angka dalam array atau referensi yang akan dihitung. Sel kosong, nilai-nilai logis, teks, atau nilai-nilai kesalahan dalam array atau referensi akan diabaikan. f. Argumen yang kesalahan nilai atau teks yang tidak dapat diterjemahkan ke dalam nomor/angka akan menyebabkan kesalahan. g. Jika Anda ingin memasukkan nilai-nilai logis dan representasi teks angka dalam referensi sebagai bagian dari perhitungan, gunakan fungsi STDEVA. Dalam penerapannya STDEV , perhitungan standar deviasi secara manual menggunakan rumus berikut: Dimana: x = data ke n x bar = x rata-rata = nilai rata-rata sampel n = banyaknya data variansi merupakan salah satu ukuran sebaran yang paling sering digunakan dalam berbagai analisis statistika. Standar deviasi merupakan akar kuadrat positif dari variansi. Secara umum, variansi dirumuskun sabagai : Jika kita memiliki n observasi yaitu X1,X2,\u2026.Xn, dan diketahui Xbar adalah rata-rata sampel yang dimiliki, maka variansi dapat dihitung sebagai : Contoh: Jika dimiliki data : 210, 340, 525, 450, 275 maka variansi dan standar deviasinya : mean = (210, 340, 525, 450, 275)/5 = 360 variansi dan standar deviasi berturut-turut : Sedangkan jika data disajikan dalam tabel distribusi frekuensi, variansi sampel dapat dihitung sebagai : Jangkauan (Range) Yang dimaksud jangkauan atau range adalah selisih data terbesar dengan data terkecil dari sekumpulan data. Jangkauan biasanya diberi simbol R. Cara menghitung jangkauan adalah dengan menggunakan rumus menghitung jangkauan dari sejumlah data berikut ini. jangkauan = data terbesar \u2013 data terkecil Misalkan kita akan menghitung jangkauan dari 8 data berikut: 15, 16, 17, 21, 14, 19, 20, 15. Berdasarkan data tersebut data terbesar adalah 21, dan data terkecil adalah 14 Jangkauan = data terbesar \u2013 data terkecil = 21 \u2013 14 = 7 Kuartil Yang dimaksud dengan kuartil adalah data yang membagi posisi sekumpulan data yang telah diurutkan menjadi empat bagian. Dalam satu urutan data terdapat 3 kuartil yaitu kuartil bawah, kuartil tengah, dan kuartil atas. Cara menentukan kuartil adalah sebagai berikut. Kuartil bawah adalah data pada posisi 1/4 dari kumpulan data yang telah diurutkan. Kuartil bawah disimbolkan dengan Q1. Kuartil tengah adalah data pada posisi 2/4 dari kumpulan data yang telah diurutkan. Kuartil tengah sama dengan median. Kuartil tengah disimbolkan dengan Q2. Kuartil atas adalah data pada posisi 3/4 dari kumpulan data yang telah diurutkan. Kuartil atas disimbolkan dengan Q3. Posisi ketiga kuartil ditentukan dari rumus berikut. Posisi Qi = i(n+1)/4 i = indeks kuartil yaitu 1, 2, 3 dan n = banyaknya data Misalkan kita akan menentukan kuartil bawah, tengah, dan kuartil atas dari 15 data berikut: 11, 24, 12, 15, 12, 18, 22, 25, 26, 27, 17, 22, 24, 19, 12. Urutan data dari yang terkecil: 11, 12, 12, 12, 15, 17, 18, 19, 22, 22, 24, 24, 25, 26, 27 Posisi ketiga kuartil adalah sebagai berikut Posisi Q1 = 1.(15+1)/4 = (16)/4 = 4 (data urutan ke 4) Posisi Q2 = 2. (15+1)/4 = 2(16)/4 = 8 (data urutan ke 4) Posisi Q3 = 3. (15+1)/4 = 3(16)/4 = 12 (data urutan ke 4) Berdasarkan posisi kuartil pada urutan data maka dapat ditentukan ketiga kuartil 11, 12, 12, 12 , 15, 17, 18, 19 , 22, 22, 24, 24 , 25, 26, 27 Jadi kuartil bawah adalah 12 Kuartil tengah = median = 19 Kuartil atas = 24 Jangkauan Antar Kuartil ( Hamparan) Yang dimaksud jangkauan antar kuartil atau hamparan adalah selisih antara kuartil atas dengan kuartil bawah. Jangkauan antar kuartil diberi simbol H. H = Q3 \u2013 Q1 Jangkauan Semi Antar Kuartil (Simpangan Kuartil) Yang dimaksud semi antar kuartil atau simpangan kuartil adalah setengah dari selisih antara kuartil atas dengan kuartil bawah. Jangkauan semi antar kuartil diberi simbol Qd. Qd = \u00bd ( Q3 \u2013 Q1) Desil Yang dimaksud dengan desil adalah data yang membagi posisi sekumpulan data yang telah diurutkan menjadi sepuluh bagian. Dalam satu urutan data terdapat 9 desil, masing masing disebut D1 sampai D9. Persentil Yang dimaksud dengan persentil adalah data yang membagi posisi sekumpulan data yang telah diurutkan menjadi seratus bagian. Dalam satu urutan data terdapat 99 persentil, masing masing disebut P1 sampai P99. Jangkauan persentil dirumuskan sebagai berikut. Jangkauan persentil = P90 \u2013 P10 Contoh Program Coba run program di bawah ini menggunakan Jupyter Notebook dan lihat hasilnya! import pandas as pd df = pd.read_csv('daftarnilai.csv') df Hasil run program : Matematika Fisika Kimia Biologi 0 67 77 71 77 1 72 83 70 79 2 75 92 80 75 3 65 79 77 90 4 66 72 67 92 ... ... ... ... ... 95 73 89 70 87 96 85 83 85 93 97 71 86 84 84 98 77 78 77 78 99 81 82 83 84 100 rows \u00d7 4 columns Contoh program menentukan mean, nilai maks, nilai min, kuartil, standar deviasi dan lain-lain pada banyak data. from IPython.display import HTML, display import tabulate table=[ [\"method\"]+[x for x in df.columns], [\"describe()\"]+['<pre>'+str(df[col].describe())+'</pre>' for col in df.columns], [\"count()\"]+[df[col].count() for col in df.columns], [\"mean()\"]+[df[col].mean() for col in df.columns], [\"std()\"]+[\"{:.2f}\".format(df[col].std()) for col in df.columns], [\"min()\"]+[df[col].min() for col in df.columns], [\"max()\"]+[df[col].max() for col in df.columns], [\"q1()\"]+[df[col].quantile(0.25) for col in df.columns], [\"q2()\"]+[df[col].quantile(0.50) for col in df.columns], [\"q3()\"]+[df[col].quantile(0.75) for col in df.columns], [\"skew()\"]+[\"{:.2f}\".format(df[col].skew()) for col in df.columns], ] display(HTML(tabulate.tabulate(table, talefmt='html'))) Hasil run program : Contoh program menentukan kurva pada sebuah tabel data. import pandas as pd import seaborn as sns df = pd.read_csv(\"daftarnilai.csv\",usecols=[0]) sns.distplot(df) <matplotlib.axes._subplots.AxesSubplot at 0xadb4ed0> Untuk file lengkapnya dapat dicek di sini Sumber : http://blog.ub.ac.id/adiarsa/2012/03/14/mean-median-modus-dan-standar-deviasi/ http://ukurandansatuan.com/cara-menghitung-mean-median-modus-jangkauan-kuartil-desil-dan-persentil.html/ \u200b","title":"Tugas 1"},{"location":"tugas1/#tugas-1","text":"","title":"TUGAS 1"},{"location":"tugas1/#statistika-deskriptif","text":"Mean Mean adalah nilai rata-rata dari beberapa buah data. Nilai mean dapat ditentukan dengan membagi jumlah data dengan banyaknya data. Mean (rata-rata) merupakan suatu ukuran pemusatan data. Mean suatu data juga merupakan statistik karena mampu menggambarkan bahwa data tersebut berada pada kisaran mean data tersebut. Mean tidak dapat digunakan sebagai ukuran pemusatan untuk jenis data nominal dan ordinal. Berdasarkan definisi dari mean adalah jumlah seluruh data dibagi dengan banyaknya data. Dengan kata lain jika kita memiliki N data sebagai berikut maka mean data tersebut dapat kita tuliskan sebagai berikut : Dimana: x = data ke n x bar = x rata-rata = nilai rata-rata sampel n = banyaknya data Bisa juga Menghitung mean a) Rumus Mean Hitung dari Data Tunggal b) Rumus Mean Hitung Untuk Data yang Disajikan Dalam Distribusi Frekuensi* Dengan : fixi = frekuensi untuk nilai xi yang bersesuaian xi = data ke-i c) Rumus Mean Hitung Gabungan Median Median menentukan letak tengah data setelah data disusun menurut urutan nilainya. Bisa juga nilai tengah dari data-data yang terurut . Simbol untuk median adalah Me. Dengan median Me, maka 50% dari banyak data nilainya paling tinggi sama dengan Me, dan 50% dari banyak data nilainya paling rendah sama dengan Me. Dalam mencari median, dibedakan untuk banyak data ganjil dan banyak data genap. Untuk banyak data ganjil, setelah data disusun menurut nilainya, maka median Me adalah data yang terletak tepat di tengah. Median bisa dihitung menggunakan rumus sebagai berikut: variansi merupakan salah satu ukuran sebaran yang paling sering digunakan dalam berbagai analisis statistika. Standar deviasi merupakan akar kuadrat positif dari variansi. Secara umum, variansi dirumuskun sabagai : Contoh: Dari lima kali kuiz statistika, seorang mahasiswa memperoleh nilai 82, 93, 86, 92, dan 79. Tentukan median populasi ini. jawab: Setelah data disusun dari yang terkecil sampai terbesar, diperoleh 79 82 86 92 93 Oleh karena itu medianya adalah 86 Kada nikotin yang berasal dari sebuah contoh acak enam batang rokok cap tertentu adalah 2.3, 2.7, 2.5, 2.9, 3.1, dan 1.9 miligram. Tentukan mediannya. jawab: Bila kadar nikotin itu diurutkan dari yang terkecil sampai terbesar, maka diperoleh 1.9 2.3 2.5 2.7 2.9 3.1 Maka mediannya adalah rata-rata dari 2.5 dan 2.7, yaitu Selain itu juga dapat dicari median dari data yang telah tersusun dalam bentuk distribusi frekuensi . Rumus yang digunakan ada dua, yaitu Dimana : Bak = batas kelas atas median c = lebar kelas s\u2019 = selisih antara nomor frekuensi median dengan frekuensi kumulatif sampai kelas median fM = frekuensi kelas median Sebelum menggunakan kedua rumus di atas, terlebih dahulu harus ditentukan kelas yang menjadi kelas median . Kelas median adalah kelas yang memuat nomor frekuensi median, dan nomor frekuensi median ini ditentukan dengan membagi keseluruhan data dengan dua. Modus Modus adalah nilai yang sering muncul. Jika kita tertarik pada data frekuensi, jumlah dari suatu nilai dari kumpulan data, maka kita menggunakan modus. Modus sangat baik bila digunakan untuk data yang memiliki sekala kategorik yaitu nominal atau ordinal. Sedangkan data ordinal adalah data kategorik yang bisa diurutkan, misalnya kita menanyakan kepada 100 orang tentang kebiasaan untuk mencuci kaki sebelum tidur, dengan pilihan jawaban: selalu (5), sering (4), kadang-kadang(3), jarang (2), tidak pernah (1). Apabila kita ingin melihat ukuran pemusatannya lebih baik menggunakan modus yaitu yaitu jawaban yang paling banyak dipilih, misalnya sering (2). Berarti sebagian besar orang dari 100 orang yang ditanyakan menjawab sering mencuci kaki sebelum tidur. Inilah cara menghitung modus: Data yang belum dikelompokkan Modus dari data yang belum dikelompokkan adalah ukuran yang memiliki frekuensi tertinggi. Modus dilambangkan mo. Data yang telah dikelompokkan Rumus Modus dari data yang telah dikelompokkan dihitung dengan rumus: Dengan : Mo = Modus L = Tepi bawah kelas yang memiliki frekuensi tertinggi (kelas modus) i = Interval kelas b1 = Frekuensi kelas modus dikurangi frekuensi kelas interval terdekat sebelumnya b2 = frekuensi kelas modus dikurangi frekuensi kelas interval terdekat sesudahnya Contoh: Sumbangan dari warga Bogor pada hari Palang Merah Nasional tercatat sebagai berikut: Rp 9.000, Rp 10.000, Rp 5.000, Rp 9.000, Rp 9.000, Rp 7.000, Rp 8.000, Rp 6.000, Rp 10.000, Rp 11.000. Maka modusnya, yaitu nilai yang terjadi dengan frekuensi paling tinggi, adalah Rp 9.000. Dari dua belas pelajar sekolah lanjutan tingkat atas yang diambil secara acak dicatat berapa kali mereka menonton film selama sebulan lalu. Data yang diperoleh adalah 2, 0, 3, 1, 2, 4, 2, 5, 4, 0, 1 dan 4. Dalam kasus ini terdapat dua modu, yaitu 2 dan 4, karena 2 dan 4 terdapat dengan frekuensi tertinggi. Distribusi demikian dikatakan bimodus. Standar defiasi Standar Deviasi dan Varians Salah satu teknik statistik yg digunakan untuk menjelaskan homogenitas kelompok. Varians merupakan jumlah kuadrat semua deviasi nilai-nilai individual thd rata-rata kelompok. Sedangkan akar dari varians disebut dengan standar deviasi atau simpangan baku. Standar Deviasi dan Varians Simpangan baku merupakan variasi sebaran data. Semakin kecil nilai sebarannya berarti variasi nilai data makin sama Jika sebarannya bernilai 0, maka nilai semua datanya adalah sama. Semakin besar nilai sebarannya berarti data semakin bervariasi. Cara penulisan rumus fungsi standar deviasi STDEV (number1, number2,\u2026) Dengan : Number1, number2, \u2026 adalah 1-255 argumen yang sesuai dengan sampel populasi. Anda juga dapat menggunakan array tunggal atau referensi ke array, bukan argumen yang dipisahkan oleh koma. Keterangan a. STDEV mengasumsikan bahwa argumen adalah contoh dari populasi. Jika data anda mewakili seluruh populasi, untuk menghitung deviasi standar menggunakan STDEVP. b. Standar deviasi dihitung menggunakan metode \u201cn-1\u2033 . c. Argumen dapat berupa nomor atau nama, array, atau referensi yang mengandung angka. d. Nilai-nilai logis dan representasi teks dari nomor yang Anda ketik langsung ke daftar argumen akan dihitung. e. Jika argumen adalah sebuah array atau referensi, hanya nomor/angka dalam array atau referensi yang akan dihitung. Sel kosong, nilai-nilai logis, teks, atau nilai-nilai kesalahan dalam array atau referensi akan diabaikan. f. Argumen yang kesalahan nilai atau teks yang tidak dapat diterjemahkan ke dalam nomor/angka akan menyebabkan kesalahan. g. Jika Anda ingin memasukkan nilai-nilai logis dan representasi teks angka dalam referensi sebagai bagian dari perhitungan, gunakan fungsi STDEVA. Dalam penerapannya STDEV , perhitungan standar deviasi secara manual menggunakan rumus berikut: Dimana: x = data ke n x bar = x rata-rata = nilai rata-rata sampel n = banyaknya data variansi merupakan salah satu ukuran sebaran yang paling sering digunakan dalam berbagai analisis statistika. Standar deviasi merupakan akar kuadrat positif dari variansi. Secara umum, variansi dirumuskun sabagai : Jika kita memiliki n observasi yaitu X1,X2,\u2026.Xn, dan diketahui Xbar adalah rata-rata sampel yang dimiliki, maka variansi dapat dihitung sebagai : Contoh: Jika dimiliki data : 210, 340, 525, 450, 275 maka variansi dan standar deviasinya : mean = (210, 340, 525, 450, 275)/5 = 360 variansi dan standar deviasi berturut-turut : Sedangkan jika data disajikan dalam tabel distribusi frekuensi, variansi sampel dapat dihitung sebagai : Jangkauan (Range) Yang dimaksud jangkauan atau range adalah selisih data terbesar dengan data terkecil dari sekumpulan data. Jangkauan biasanya diberi simbol R. Cara menghitung jangkauan adalah dengan menggunakan rumus menghitung jangkauan dari sejumlah data berikut ini. jangkauan = data terbesar \u2013 data terkecil Misalkan kita akan menghitung jangkauan dari 8 data berikut: 15, 16, 17, 21, 14, 19, 20, 15. Berdasarkan data tersebut data terbesar adalah 21, dan data terkecil adalah 14 Jangkauan = data terbesar \u2013 data terkecil = 21 \u2013 14 = 7 Kuartil Yang dimaksud dengan kuartil adalah data yang membagi posisi sekumpulan data yang telah diurutkan menjadi empat bagian. Dalam satu urutan data terdapat 3 kuartil yaitu kuartil bawah, kuartil tengah, dan kuartil atas. Cara menentukan kuartil adalah sebagai berikut. Kuartil bawah adalah data pada posisi 1/4 dari kumpulan data yang telah diurutkan. Kuartil bawah disimbolkan dengan Q1. Kuartil tengah adalah data pada posisi 2/4 dari kumpulan data yang telah diurutkan. Kuartil tengah sama dengan median. Kuartil tengah disimbolkan dengan Q2. Kuartil atas adalah data pada posisi 3/4 dari kumpulan data yang telah diurutkan. Kuartil atas disimbolkan dengan Q3. Posisi ketiga kuartil ditentukan dari rumus berikut. Posisi Qi = i(n+1)/4 i = indeks kuartil yaitu 1, 2, 3 dan n = banyaknya data Misalkan kita akan menentukan kuartil bawah, tengah, dan kuartil atas dari 15 data berikut: 11, 24, 12, 15, 12, 18, 22, 25, 26, 27, 17, 22, 24, 19, 12. Urutan data dari yang terkecil: 11, 12, 12, 12, 15, 17, 18, 19, 22, 22, 24, 24, 25, 26, 27 Posisi ketiga kuartil adalah sebagai berikut Posisi Q1 = 1.(15+1)/4 = (16)/4 = 4 (data urutan ke 4) Posisi Q2 = 2. (15+1)/4 = 2(16)/4 = 8 (data urutan ke 4) Posisi Q3 = 3. (15+1)/4 = 3(16)/4 = 12 (data urutan ke 4) Berdasarkan posisi kuartil pada urutan data maka dapat ditentukan ketiga kuartil 11, 12, 12, 12 , 15, 17, 18, 19 , 22, 22, 24, 24 , 25, 26, 27 Jadi kuartil bawah adalah 12 Kuartil tengah = median = 19 Kuartil atas = 24 Jangkauan Antar Kuartil ( Hamparan) Yang dimaksud jangkauan antar kuartil atau hamparan adalah selisih antara kuartil atas dengan kuartil bawah. Jangkauan antar kuartil diberi simbol H. H = Q3 \u2013 Q1 Jangkauan Semi Antar Kuartil (Simpangan Kuartil) Yang dimaksud semi antar kuartil atau simpangan kuartil adalah setengah dari selisih antara kuartil atas dengan kuartil bawah. Jangkauan semi antar kuartil diberi simbol Qd. Qd = \u00bd ( Q3 \u2013 Q1) Desil Yang dimaksud dengan desil adalah data yang membagi posisi sekumpulan data yang telah diurutkan menjadi sepuluh bagian. Dalam satu urutan data terdapat 9 desil, masing masing disebut D1 sampai D9. Persentil Yang dimaksud dengan persentil adalah data yang membagi posisi sekumpulan data yang telah diurutkan menjadi seratus bagian. Dalam satu urutan data terdapat 99 persentil, masing masing disebut P1 sampai P99. Jangkauan persentil dirumuskan sebagai berikut. Jangkauan persentil = P90 \u2013 P10","title":"Statistika Deskriptif"},{"location":"tugas1/#contoh-program","text":"Coba run program di bawah ini menggunakan Jupyter Notebook dan lihat hasilnya! import pandas as pd df = pd.read_csv('daftarnilai.csv') df Hasil run program : Matematika Fisika Kimia Biologi 0 67 77 71 77 1 72 83 70 79 2 75 92 80 75 3 65 79 77 90 4 66 72 67 92 ... ... ... ... ... 95 73 89 70 87 96 85 83 85 93 97 71 86 84 84 98 77 78 77 78 99 81 82 83 84 100 rows \u00d7 4 columns Contoh program menentukan mean, nilai maks, nilai min, kuartil, standar deviasi dan lain-lain pada banyak data. from IPython.display import HTML, display import tabulate table=[ [\"method\"]+[x for x in df.columns], [\"describe()\"]+['<pre>'+str(df[col].describe())+'</pre>' for col in df.columns], [\"count()\"]+[df[col].count() for col in df.columns], [\"mean()\"]+[df[col].mean() for col in df.columns], [\"std()\"]+[\"{:.2f}\".format(df[col].std()) for col in df.columns], [\"min()\"]+[df[col].min() for col in df.columns], [\"max()\"]+[df[col].max() for col in df.columns], [\"q1()\"]+[df[col].quantile(0.25) for col in df.columns], [\"q2()\"]+[df[col].quantile(0.50) for col in df.columns], [\"q3()\"]+[df[col].quantile(0.75) for col in df.columns], [\"skew()\"]+[\"{:.2f}\".format(df[col].skew()) for col in df.columns], ] display(HTML(tabulate.tabulate(table, talefmt='html'))) Hasil run program : Contoh program menentukan kurva pada sebuah tabel data. import pandas as pd import seaborn as sns df = pd.read_csv(\"daftarnilai.csv\",usecols=[0]) sns.distplot(df) <matplotlib.axes._subplots.AxesSubplot at 0xadb4ed0> Untuk file lengkapnya dapat dicek di sini Sumber : http://blog.ub.ac.id/adiarsa/2012/03/14/mean-median-modus-dan-standar-deviasi/ http://ukurandansatuan.com/cara-menghitung-mean-median-modus-jangkauan-kuartil-desil-dan-persentil.html/ \u200b","title":"Contoh Program"},{"location":"tugas2/","text":"Tugas 2 Mengukur Jarak Data Mengukur Jarak Tipe Numerik Salah satu tantangan dalam era ini dengan datatabase yang memiliki banyak tipe data. Mengukur jarak adalah komponen utama dalam algoritma clustering berbasis jarak. Alogritma seperit Algoritma Partisioning misal K-Mean, K-medoidm dan fuzzy c-mean dan rough clustering bergantung pada jarak untuk melakukan pengelompokkan Sebelum menjelaskan tentang beberapa macam ukuran jarak, kita mendefinisikan terlebih dahulu yaiut v1,v2v1,v2 menyatakan dua vektor yang menyatakan v1=x1,x2,...,xn,v2=y1,y2,...,yn,v1=x1,x2,...,xn,v2=y1,y2,...,yn, dimana xi,yixi,yi disebut attribut. Ada beberapa ukuran similaritas datau ukuran jarak, diantaranya : Minkowski Distance Kelompok Minkowski diantaranya adalah Euclidean distance dan Manhattan distance, yang menjadi kasus khusus dari Minkowski distance. Minkowski distance dinyatakan dengan dimana m adalah bilangan riel positif dan x i dan y i adalah dua vektor dalam runang dimensi nn Implementasi ukuran jarak Minkowski pada model clustering data atribut dilakukan normalisasi untuk menghindari dominasi dari atribut yang memiliki skala data besar. Manhattan distance Manhattan distance adalah kasus khsusu dari jarak Minkowski distance pada m = 1. Seperti Minkowski Distance, Manhattan distance sensitif terhadap outlier. BIla ukuran ini digunakan dalam algoritma clustering , bentuk cluster adalah hyper-rectangular. Ukuran ini didefinisikan dengan Euclidean distance Jarak yang paling terkenal yang digunakan untuk data numerik adalah jarak Euclidean. Ini adalah kasus khusus dari jarak Minkowski ketika m = 2. Jarak Euclidean berkinerja baik ketika digunakan untuk kumpulan data cluster kompak atau terisolasi . Meskipun jarak Euclidean sangat umum dalam pengelompokan, ia memiliki kelemahan: jika dua vektor data tidak memiliki nilai atribut yang sama, kemungkin memiliki jarak yang lebih kecil daripada pasangan vektor data lainnya yang mengandung nilai atribut yang sama. Masalah lain dengan jarak Euclidean sebagai fitur skala terbesar akan mendominasi yang lain. Normalisasi fitur kontinu adalah solusi untuk mengatasi kelemahan ini. Average Distance Berkenaan dengan kekurangan dari Jarak Euclidian Distance diatas, rata rata jarak adala versi modikfikasid ari jarak Euclidian untuk memperbaiki hasil. Untuk dua titik x,yx,y dalam ruang dimensi nn, rata-rata jarak didefinisikan dengan Weighted euclidean distance Jika berdasarkan tingkatan penting dari masing masing atribut ditentukan, maka Weighted Euclidean distance adalah modifikisasi lain dari jarak Euclidean distance yang dapat digunakan. Ukuran ini dirumuskan dengan dimana wi adalah bobot yang diberikan pada atribut ke i. Chord distance Chord distance adalah salah satu ukuran jarak modifikasi Euclidean distance untuk mengatasi kekurangan dari Euclidean distance. Ini dapat dipecahkan juga dengan menggunakan skala pengukuran yang baik. Jarak ini dapat juga dihitung dari data yang tidak dinormalisasi . Chord distance didefinisikan dengan dimana \u2016 x \u20162 adalah L 2-norm . Mahalanobis distance Mahalanobis distance berdasarkan data berbeda dengan Euclidean dan Manhattan distances yang bebas antra data dengan data yang lain. Jarak Mahalanobis yang teratur dapat digunakan untuk mengekstraksi hyperellipsoidal clusters. Jarak Mahalanobis dapat mengurangi distorsi yang disebabkan oleh korelasi linier antara fitur dengan menerapkan transformasi pemutihan ke data atau dengan menggunakan kuadrat Jarak mahalanobis. Mahalanobis distance dinyatakan dengan dimana S adalah matrik covariance data. Cosine measure Ukuran Cosine similarity lebih banyak digunakan dalam similaritas dokumen dan dinyatakan dengan dimana \u2225y\u22252 adalah Euclidean norm dari vektor y=(y1,y2,\u2026,yn)y=(y1,y2,\u2026,yn) didefinisikan dengan Pearson correlation Pearson correlation banyak digunakan dalam data expresi gen. Ukuran similaritas ini menghitung similaritas antara duan bentuk pola expresi gen. Pearson correlation didefinisikan dengan , where \u03bc x The Pearson correlation kelemahannya adalah sensitif terhadap outlier Mengukur Jarak Atribut Binary Mari kita lihat similaritas dan desimilirity untuk objek yang dijelaskan oleh atribut biner simetris atau asimetris. Aatribut biner hanya memiliki dua status: 0 dan 1 Contoh atribut perokok menggambarkan seorang pasien, misalnya, 1 menunjukkan bahwa pasien merokok, sedangkan 0 menunjukkan pasien tidak merokok. Memperlakukan atribut biner sebagai atribut numerik tidak diperkenankan. Oleh karena itu, metode khusus untuk data biner diperlukan untuk membedakan komputasi. Jadi, bagaimana kita bisa menghitung ketidaksamaan antara dua atribut biner? \u201dSatu pendekatan melibatkan penghitungan matriks ketidaksamaan dari data biner yang diberikan. Jika semua atribut biner dianggap memiliki bobot yang sama, kita memiliki tabel kontingensi 2\u00d72 di mana qq adalah jumlah atribut yang sama dengan 1 untuk kedua objek ii dan jj, rr adalah jumlah atribut yang sama dengan 1 untuk objek ii tetapi 0 untuk objek jj, ss adalah jumlah atribut yang sama dengan 0 untuk objek ii tetapi 1 untuk objek jj, dan tt adalah jumlah atribut yang sama dengan 0 untuk kedua objek ii dan jj. Jumlah total atribut adalah pp, di mana p=q+r+s+tp=q+r+s+t Ingatlah bahwa untuk atribut biner simetris, masing-masing nilai bobot yang sama.Dissimilarity yang didasarkan pada atribut aymmetric binary disebut symmetric binary dissimilarity. Jika objek i dan j dinyatakan sebagai atribut biner simetris, maka dissimilarity antarii dan j adalah $$ d ( i , j ) = \\frac { r + s } { q + r + s + t } $$ Untuk atribut biner asimetris, kedua kondisi tersebut tidak sama pentingnya, seperti hasil positif (1) dan negatif (0) dari tes penyakit. Diberikan dua atribut biner asimetris, pencocokan keduanya 1 (kecocokan positif) kemudian dianggap lebih signifikan daripada kecocokan negatif. Ketidaksamaan berdasarkan atribut-atribut ini disebut asimetris biner dissimilarity, di mana jumlah kecocokan negatif, t, dianggap tidak penting dan dengan demikian diabaikan. Berikut perhitungannya $$ d ( i , j ) = \\frac { r + s } { q + r + s } $$ Kita dapat mengukur perbedaan antara dua atribut biner berdasarkan pada disimilarity. Misalnya, biner asimetris kesamaan antara objek ii dan jj dapat dihitung dengan $$ \\operatorname { sim } ( i , j ) = \\frac { q } { q + r + s } = 1 - d ( i , j ) $$ Persamaan similarity ini disebut dengan Jaccard coefficient Mengukur Jarak Tipe categorical Li, C., & Li, H. (2010). A Survey of Distance Metrics for Nominal Attributes. JSW, 5(11), 1262-1269. Overlay Metric Ketika semua atribut adalah bertipe nominal, ukuran jarak yang paling sederhana adalah dengan Ovelay Metric (OM) yang dinyatakan dengan $$ d ( x , y ) = \\sum _ { i = 1 } ^ { n } \\delta ( a _ { i } ( x ) , a _ { i } ( y ) ) $$ dimana nn adalah banyaknya atribut, ai(x)ai(x) dan ai(y)ai(y) adalah nilai atribut ke ii yaitu AiAi dari masing masing objek xx dan yy, \u03b4 (ai(x),ai(y))\u03b4 (ai(x),ai(y)) adalah 0 jika ai(x)=ai(y) dan 1 jika sebaliknya. OM banyak digunakan oleh instance-based learning dan locally weighted learning. Jelas sekali , ini sedikit beruk untuk mengukur jarak antara masing-masing pasangan sample, karena gagal memanfaatkan tambahan informasi yang diberikan oleh nilai atribut nominal yang bisa membantu dalam generalisasi. Value Difference Metric (VDM) VDM dikenalkan oleh Standfill and Waltz, versi sederhana dari VDM tanpa skema pembobotan didefinsisikan dengan $$ d ( x , y ) = \\sum _ { i = 1 } ^ { n } \\sum _ { c = 1 } ^ { C } \\left| P ( c | a _ { i } ( x ) ) - P ( c | a _ { i } ( y ) ) \\right | $$ dimana CCadalah banyaknya kelas, P(c|ai(x))P(c|ai(x)) adalah probabilitas bersyarat dimana kelas xx adalah cc dari atribut AiAi, yang memiliki nilai ai(x)ai(x), P(c|ai(y))P(c|ai(y)) adalah probabilitas bersyarat dimana kelas yy adalah cc dengan atribut AiAi memiliki nilai ai(y)ai(y) VDM mengasumsikan bahwa dua nilai dari atribut adalah lebih dekat jika memiliki klasifikasi sama. Pendekatan lain berbasi probabilitas adalah SFM (Short and Fukunaga Metric) yang kemudian dikembangkan oleh Myles dan Hand dan didefinisikan dengan $$ d ( x , y ) = \\sum _ { c = 1 } ^ { C } \\left | P ( c | x ) - P ( c | y ) \\right| $$ diman probabilitas keanggotaan kelas diestimasi dengan P(c|x) dan P(c|y) didekati dengan Naive Bayes, Minimum Risk Metric (MRM) Ukuran ini dipresentasikan oleh Blanzieri and Ricci, berbeda dari SFM yaitu meminimumkan selisih antara kesalahan berhingga dan kesalahan asymtotic. MRM meminimumkan risk of misclassification yang didefinisikan dengan $$ d ( x , y ) = \\sum _ { c = 1 } ^ { C } P ( c | x ) ( 1 - P ( c | y ) ) $$ Mengukur Jarak Tipe Ordinal Han, J., Pei, J., & Kamber, M. (2011). Data mining: concepts and techniques. Elsevier . Nilai-nilai atribut ordinal memiliki urutan atau peringkat, namun besarnya antara nilai-nilai berturut-turut tidak diketahui. Contohnya tingkatan kecil, sedang, besar untuk atribut ukuran. Atribut ordinal juga dapat diperoleh dari diskritisasi atribut numerik dengan membuat rentang nilai ke dalam sejumlah kategori tertentu. Kategori-kategori ini disusun dalam peringkat. Yaitu, rentang atribut numerik dapat dipetakan ke atribut ordinal ff yang memiliki MfMf state. Misalnya, kisaran suhu atribut skala-skala (dalam Celcius)dapat diatur ke dalam status berikut: \u221230 hingga \u221210, \u221210 hingga 10, 10 hingga 30, masing-masing mewakili kategori suhu dingin, suhu sedang, dan suhu hangat. MM adalah jumlah keadaan yang dapat dilakukan oleh atribut ordinalmemiliki. State ini menentukan peringkat 1,...,Mf1,...,Mf Perlakuan untuk atribut ordinal adalah cukup sama dengan atribut numerik ketika menghitung disimilarity antara objek. Misalkan ff adalah atribut-atribut dari atribut ordinal dari nn objek. Menghitung disimilarity terhadap f fitur sebagai berikut: Nilai ff untuk objek ke-ii adalah xifxif, dan ff memiliki MfMf status urutan , mewakili peringkat 1,..,Mf1,..,Mf Ganti setiap xifxif dengan peringkatnya, rif\u2208{1...Mf}rif\u2208{1...Mf} Karena setiap atribut ordinal dapat memiliki jumlah state yang berbeda, diperlukan untuk memetakan rentang setiap atribut ke [0,0, 1.0] sehingga setiap atribut memiliki bobot yang sama. Perl melakukan normalisasi data dengan mengganti peringkat rifrif dengan $$ z _ { i f } = \\frac { r _ { i f } - 1 } { M _ { f } - 1 } $$ Dissimilarity kemudian dihitung dengan menggunakan ukuran jarak seperti atribut numerik dengan data yang baru setelah ditransformasi $ z _ { i f }$ Menghitung Jarak Tipe Campuran Wilson, D. R., & Martinez, T. R. (1997). Improved heterogeneous distance functions. Journal of artificial intelligence research, 6, 1-34. Menghitung ketidaksamaan antara objek dengan atribut campuran yang berupa nominal, biner simetris, biner asimetris, numerik, atau ordinal yang ada pada kebanyakan databasae dapat dinyatakan dengan memproses semua tipe atribut secara bersamaan. Salah satu teknik tersebut menggabungkan atribut yang berbeda ke dalam matriks ketidaksamaan tunggal dan menyatakannya dengan skala interval antar [0,0,1.0][0,0,1.0]. Misalkan data berisi atribut pp tipe campuran. Ketidaksamaan (disimilarity ) antara objek ii dan jj dinyatakan dengan $$ d ( i , j ) = \\frac { \\sum _ { f = 1 } ^ { p } \\delta _ { i j } ^ { ( f ) } d _ { i j } ^ { ( f ) } } { \\sum _ { f = 1 } ^ { p } \\delta _ { i j } ^ { ( f ) } } $$ dimana \u03b4fij=0\u03b4ijf=0 - jika xifxif atau xjfxjf adalah hilang (i.e., tidak ada pengukuran dari atribut f untuk objek ii atau objek jj) jika xif=xjf=0xif=xjf=0 dan atribut ff adalah binary asymmetric, selain itu \u03b4fij=1\u03b4ijf=1 Kontribusi dari atribut ff untuk dissimilarity antara i dan j (yaitu.dfijdijf) dihitung bergantung pada tipenya, Jika ff adalah numerik, $$ d_{ij}^{f}=\\frac{ |x {if}-x {jf}|}{max_hx_{hf}-min_hx{hf}} $$ , di mana h menjalankan semua nilai objek yang tidak hilang untuk atribut f Jika ff adalah nominal atau binary,$d_{ij}^{f}=0 $jika xif=xjfxif=xjf, sebaliknya dfij=1dijf=1 Jika ff adalah ordinal maka hitung rangking rifrif dan $$ \\mathcal z_{if}=\\frac {r_{if}-1}{M_f-1} $$ , dan perlakukan zifzif sebagai numerik. Contoh Program import pandas as pd pd.read_csv(\"hayes-roth.csv\") name hobby age educationallevel maritalstatus class 0 92 2 1 1 2 1 1 10 2 1 3 2 2 2 83 3 1 4 1 3 3 61 2 4 2 2 3 4 107 1 1 3 4 3 ... ... ... ... ... ... ... 127 44 1 1 4 3 3 128 40 2 1 2 1 1 129 90 1 2 1 2 2 130 21 1 2 2 1 2 131 9 3 1 1 2 1 132 rows \u00d7 6 columns Menghitung Jarak Numerik Numeric attribute adalah atribut kuantitatif, yaitu dapat dihitung banyaknya dan dapat diwakilkan dalam bilangan integer atau real. Numeric attribute dapat berupa skala interval(interval-scaled) atau skala-rasio(ration-scaled), kedua-duanya memiliki nilai mean, median, dan mode. Untuk numeric attribute interval-scaled tidak memiliki true zero-point(nilai nol yang sebenarnya), sedangkan yang ratio-scaled memiliki true zero-point. def chordDist(v1,v2,jenis): jumlah=0 normv1=0 normv2=0 for x in range (len(jenis)): normv1=normv1+(int(a.values.tolist()[v1][jenis[x]])**2) normv2=normv2+(int(a.values.tolist()[v2][jenis[x]])**2) jumlah=jumlah+(int(a.values.tolist()[v1][jenis[x]])*int(a.values.tolist()[v2][jenis[x]])) return ((2-(2*jumlah/(normv1*normv2)))**0.5) Menghitung Jarak Binary Binary attribute adalah nominal atribut yang hanya memiliki dua kategori atau keadaan yaitu 0 dan 1. 0 berarti tidak ada dan 1 berarti ada. Binary attribute biasanya diartikan sebagai Boolean jika kedua keadaannya adalah true(benar) dan false(salah). Binary attribute bisa simetris(symmetric) dan bisa asimetris(assymmetric). Simetris jika kedua nilainya bernilai sama/setimbang harganya, sehingga tidak bisa diberi kode 0 atau 1, sedangkan asimetris kedua nilainya tidak setimbang harganya, sehingga dapat diberi kode 0 atau 1. def binaryDist(v1,v2,jenis): q=0 r=0 s=0 t=0 for x in range (len(jenis)): if (int(a.values.tolist()[v1][jenis[x]]))==1 and (int(a.values.tolist()[v2][jenis[x]]))==1: q=q+1 elif (int(a.values.tolist()[v1][jenis[x]]))==1 and (int(a.values.tolist()[v2][jenis[x]]))==2: r=r+1 elif (int(a.values.tolist()[v1][jenis[x]]))==2 and (int(a.values.tolist()[v2][jenis[x]]))==1: s=s+1 else: t=t+1 return ((r+s)/(q+r+s+t)) Menghitung Jarak Ordinal Ordinal attribute adalah atribut dengan nilai-nilai yang kemungkinan memiliki urutan yang mempunyai arti atau tingkatan(ranking), akan tetapi jarak antara nilai-nilainya tidak diketahui. Ordinal attribute berguna untuk mendaftarkan taksiran suatu kualitas yang tidak bisa diukur secara obyektif. Oleh karena itu ordinal attribute biasanya digunakan dalam survey atau rating. def ordDist(v1,v2,jenis): jumlah=0 for x in range (len(jenis)): z1=int(a.values.tolist()[v1][jenis[x]])-1 z2=int(a.values.tolist()[v2][jenis[x]])-1 jumlah=jumlah+chordDist(z1,z2,jenis) return (jumlah) Atribut Nominal Nominal attribute adalah atribut yang nilainya berupa simbol-simbol atau nama-nama benda. Dan nilainya tidak memiliki urutan yang memiliki arti. Pada nominal attribute, operasi matematika pada nilai-nilainya tidak berarti. Sehingga, tidak masuk akal untuk mencari nilai mean(rata-rata)nya atau nilai median(tengah) nya, kecuali untuk mode(nilai yang paling sering muncul)nya. Sumber : https://github.com/mulaab/datamining/tree/master/memahami-data https://datamining10041.wordpress.com/2012/03/25/atribut-nominal-biner-ordinal-dan-numerik/","title":"Tugas 2"},{"location":"tugas2/#tugas-2","text":"","title":"Tugas 2"},{"location":"tugas2/#mengukur-jarak-data","text":"","title":"Mengukur Jarak Data"},{"location":"tugas2/#mengukur-jarak-tipe-numerik","text":"Salah satu tantangan dalam era ini dengan datatabase yang memiliki banyak tipe data. Mengukur jarak adalah komponen utama dalam algoritma clustering berbasis jarak. Alogritma seperit Algoritma Partisioning misal K-Mean, K-medoidm dan fuzzy c-mean dan rough clustering bergantung pada jarak untuk melakukan pengelompokkan Sebelum menjelaskan tentang beberapa macam ukuran jarak, kita mendefinisikan terlebih dahulu yaiut v1,v2v1,v2 menyatakan dua vektor yang menyatakan v1=x1,x2,...,xn,v2=y1,y2,...,yn,v1=x1,x2,...,xn,v2=y1,y2,...,yn, dimana xi,yixi,yi disebut attribut. Ada beberapa ukuran similaritas datau ukuran jarak, diantaranya :","title":"Mengukur Jarak Tipe Numerik"},{"location":"tugas2/#minkowski-distance","text":"Kelompok Minkowski diantaranya adalah Euclidean distance dan Manhattan distance, yang menjadi kasus khusus dari Minkowski distance. Minkowski distance dinyatakan dengan dimana m adalah bilangan riel positif dan x i dan y i adalah dua vektor dalam runang dimensi nn Implementasi ukuran jarak Minkowski pada model clustering data atribut dilakukan normalisasi untuk menghindari dominasi dari atribut yang memiliki skala data besar.","title":"Minkowski Distance"},{"location":"tugas2/#manhattan-distance","text":"Manhattan distance adalah kasus khsusu dari jarak Minkowski distance pada m = 1. Seperti Minkowski Distance, Manhattan distance sensitif terhadap outlier. BIla ukuran ini digunakan dalam algoritma clustering , bentuk cluster adalah hyper-rectangular. Ukuran ini didefinisikan dengan","title":"Manhattan distance"},{"location":"tugas2/#euclidean-distance","text":"Jarak yang paling terkenal yang digunakan untuk data numerik adalah jarak Euclidean. Ini adalah kasus khusus dari jarak Minkowski ketika m = 2. Jarak Euclidean berkinerja baik ketika digunakan untuk kumpulan data cluster kompak atau terisolasi . Meskipun jarak Euclidean sangat umum dalam pengelompokan, ia memiliki kelemahan: jika dua vektor data tidak memiliki nilai atribut yang sama, kemungkin memiliki jarak yang lebih kecil daripada pasangan vektor data lainnya yang mengandung nilai atribut yang sama. Masalah lain dengan jarak Euclidean sebagai fitur skala terbesar akan mendominasi yang lain. Normalisasi fitur kontinu adalah solusi untuk mengatasi kelemahan ini.","title":"Euclidean distance"},{"location":"tugas2/#average-distance","text":"Berkenaan dengan kekurangan dari Jarak Euclidian Distance diatas, rata rata jarak adala versi modikfikasid ari jarak Euclidian untuk memperbaiki hasil. Untuk dua titik x,yx,y dalam ruang dimensi nn, rata-rata jarak didefinisikan dengan","title":"Average Distance"},{"location":"tugas2/#weighted-euclidean-distance","text":"Jika berdasarkan tingkatan penting dari masing masing atribut ditentukan, maka Weighted Euclidean distance adalah modifikisasi lain dari jarak Euclidean distance yang dapat digunakan. Ukuran ini dirumuskan dengan dimana wi adalah bobot yang diberikan pada atribut ke i.","title":"Weighted euclidean distance"},{"location":"tugas2/#chord-distance","text":"Chord distance adalah salah satu ukuran jarak modifikasi Euclidean distance untuk mengatasi kekurangan dari Euclidean distance. Ini dapat dipecahkan juga dengan menggunakan skala pengukuran yang baik. Jarak ini dapat juga dihitung dari data yang tidak dinormalisasi . Chord distance didefinisikan dengan dimana \u2016 x \u20162 adalah L 2-norm .","title":"Chord distance"},{"location":"tugas2/#mahalanobis-distance","text":"Mahalanobis distance berdasarkan data berbeda dengan Euclidean dan Manhattan distances yang bebas antra data dengan data yang lain. Jarak Mahalanobis yang teratur dapat digunakan untuk mengekstraksi hyperellipsoidal clusters. Jarak Mahalanobis dapat mengurangi distorsi yang disebabkan oleh korelasi linier antara fitur dengan menerapkan transformasi pemutihan ke data atau dengan menggunakan kuadrat Jarak mahalanobis. Mahalanobis distance dinyatakan dengan dimana S adalah matrik covariance data.","title":"Mahalanobis distance"},{"location":"tugas2/#cosine-measure","text":"Ukuran Cosine similarity lebih banyak digunakan dalam similaritas dokumen dan dinyatakan dengan dimana \u2225y\u22252 adalah Euclidean norm dari vektor y=(y1,y2,\u2026,yn)y=(y1,y2,\u2026,yn) didefinisikan dengan","title":"Cosine measure"},{"location":"tugas2/#pearson-correlation","text":"Pearson correlation banyak digunakan dalam data expresi gen. Ukuran similaritas ini menghitung similaritas antara duan bentuk pola expresi gen. Pearson correlation didefinisikan dengan , where \u03bc x The Pearson correlation kelemahannya adalah sensitif terhadap outlier","title":"Pearson correlation"},{"location":"tugas2/#mengukur-jarak-atribut-binary","text":"Mari kita lihat similaritas dan desimilirity untuk objek yang dijelaskan oleh atribut biner simetris atau asimetris. Aatribut biner hanya memiliki dua status: 0 dan 1 Contoh atribut perokok menggambarkan seorang pasien, misalnya, 1 menunjukkan bahwa pasien merokok, sedangkan 0 menunjukkan pasien tidak merokok. Memperlakukan atribut biner sebagai atribut numerik tidak diperkenankan. Oleh karena itu, metode khusus untuk data biner diperlukan untuk membedakan komputasi. Jadi, bagaimana kita bisa menghitung ketidaksamaan antara dua atribut biner? \u201dSatu pendekatan melibatkan penghitungan matriks ketidaksamaan dari data biner yang diberikan. Jika semua atribut biner dianggap memiliki bobot yang sama, kita memiliki tabel kontingensi 2\u00d72 di mana qq adalah jumlah atribut yang sama dengan 1 untuk kedua objek ii dan jj, rr adalah jumlah atribut yang sama dengan 1 untuk objek ii tetapi 0 untuk objek jj, ss adalah jumlah atribut yang sama dengan 0 untuk objek ii tetapi 1 untuk objek jj, dan tt adalah jumlah atribut yang sama dengan 0 untuk kedua objek ii dan jj. Jumlah total atribut adalah pp, di mana p=q+r+s+tp=q+r+s+t Ingatlah bahwa untuk atribut biner simetris, masing-masing nilai bobot yang sama.Dissimilarity yang didasarkan pada atribut aymmetric binary disebut symmetric binary dissimilarity. Jika objek i dan j dinyatakan sebagai atribut biner simetris, maka dissimilarity antarii dan j adalah $$ d ( i , j ) = \\frac { r + s } { q + r + s + t } $$ Untuk atribut biner asimetris, kedua kondisi tersebut tidak sama pentingnya, seperti hasil positif (1) dan negatif (0) dari tes penyakit. Diberikan dua atribut biner asimetris, pencocokan keduanya 1 (kecocokan positif) kemudian dianggap lebih signifikan daripada kecocokan negatif. Ketidaksamaan berdasarkan atribut-atribut ini disebut asimetris biner dissimilarity, di mana jumlah kecocokan negatif, t, dianggap tidak penting dan dengan demikian diabaikan. Berikut perhitungannya $$ d ( i , j ) = \\frac { r + s } { q + r + s } $$ Kita dapat mengukur perbedaan antara dua atribut biner berdasarkan pada disimilarity. Misalnya, biner asimetris kesamaan antara objek ii dan jj dapat dihitung dengan $$ \\operatorname { sim } ( i , j ) = \\frac { q } { q + r + s } = 1 - d ( i , j ) $$ Persamaan similarity ini disebut dengan Jaccard coefficient","title":"Mengukur Jarak Atribut Binary"},{"location":"tugas2/#mengukur-jarak-tipe-categorical","text":"Li, C., & Li, H. (2010). A Survey of Distance Metrics for Nominal Attributes. JSW, 5(11), 1262-1269.","title":"Mengukur Jarak Tipe categorical"},{"location":"tugas2/#overlay-metric","text":"Ketika semua atribut adalah bertipe nominal, ukuran jarak yang paling sederhana adalah dengan Ovelay Metric (OM) yang dinyatakan dengan $$ d ( x , y ) = \\sum _ { i = 1 } ^ { n } \\delta ( a _ { i } ( x ) , a _ { i } ( y ) ) $$ dimana nn adalah banyaknya atribut, ai(x)ai(x) dan ai(y)ai(y) adalah nilai atribut ke ii yaitu AiAi dari masing masing objek xx dan yy, \u03b4 (ai(x),ai(y))\u03b4 (ai(x),ai(y)) adalah 0 jika ai(x)=ai(y) dan 1 jika sebaliknya. OM banyak digunakan oleh instance-based learning dan locally weighted learning. Jelas sekali , ini sedikit beruk untuk mengukur jarak antara masing-masing pasangan sample, karena gagal memanfaatkan tambahan informasi yang diberikan oleh nilai atribut nominal yang bisa membantu dalam generalisasi.","title":"Overlay Metric"},{"location":"tugas2/#value-difference-metric-vdm","text":"VDM dikenalkan oleh Standfill and Waltz, versi sederhana dari VDM tanpa skema pembobotan didefinsisikan dengan $$ d ( x , y ) = \\sum _ { i = 1 } ^ { n } \\sum _ { c = 1 } ^ { C } \\left| P ( c | a _ { i } ( x ) ) - P ( c | a _ { i } ( y ) ) \\right | $$ dimana CCadalah banyaknya kelas, P(c|ai(x))P(c|ai(x)) adalah probabilitas bersyarat dimana kelas xx adalah cc dari atribut AiAi, yang memiliki nilai ai(x)ai(x), P(c|ai(y))P(c|ai(y)) adalah probabilitas bersyarat dimana kelas yy adalah cc dengan atribut AiAi memiliki nilai ai(y)ai(y) VDM mengasumsikan bahwa dua nilai dari atribut adalah lebih dekat jika memiliki klasifikasi sama. Pendekatan lain berbasi probabilitas adalah SFM (Short and Fukunaga Metric) yang kemudian dikembangkan oleh Myles dan Hand dan didefinisikan dengan $$ d ( x , y ) = \\sum _ { c = 1 } ^ { C } \\left | P ( c | x ) - P ( c | y ) \\right| $$ diman probabilitas keanggotaan kelas diestimasi dengan P(c|x) dan P(c|y) didekati dengan Naive Bayes,","title":"Value Difference Metric (VDM)"},{"location":"tugas2/#minimum-risk-metric-mrm","text":"Ukuran ini dipresentasikan oleh Blanzieri and Ricci, berbeda dari SFM yaitu meminimumkan selisih antara kesalahan berhingga dan kesalahan asymtotic. MRM meminimumkan risk of misclassification yang didefinisikan dengan $$ d ( x , y ) = \\sum _ { c = 1 } ^ { C } P ( c | x ) ( 1 - P ( c | y ) ) $$","title":"Minimum Risk Metric (MRM)"},{"location":"tugas2/#mengukur-jarak-tipe-ordinal","text":"Han, J., Pei, J., & Kamber, M. (2011). Data mining: concepts and techniques. Elsevier . Nilai-nilai atribut ordinal memiliki urutan atau peringkat, namun besarnya antara nilai-nilai berturut-turut tidak diketahui. Contohnya tingkatan kecil, sedang, besar untuk atribut ukuran. Atribut ordinal juga dapat diperoleh dari diskritisasi atribut numerik dengan membuat rentang nilai ke dalam sejumlah kategori tertentu. Kategori-kategori ini disusun dalam peringkat. Yaitu, rentang atribut numerik dapat dipetakan ke atribut ordinal ff yang memiliki MfMf state. Misalnya, kisaran suhu atribut skala-skala (dalam Celcius)dapat diatur ke dalam status berikut: \u221230 hingga \u221210, \u221210 hingga 10, 10 hingga 30, masing-masing mewakili kategori suhu dingin, suhu sedang, dan suhu hangat. MM adalah jumlah keadaan yang dapat dilakukan oleh atribut ordinalmemiliki. State ini menentukan peringkat 1,...,Mf1,...,Mf Perlakuan untuk atribut ordinal adalah cukup sama dengan atribut numerik ketika menghitung disimilarity antara objek. Misalkan ff adalah atribut-atribut dari atribut ordinal dari nn objek. Menghitung disimilarity terhadap f fitur sebagai berikut: Nilai ff untuk objek ke-ii adalah xifxif, dan ff memiliki MfMf status urutan , mewakili peringkat 1,..,Mf1,..,Mf Ganti setiap xifxif dengan peringkatnya, rif\u2208{1...Mf}rif\u2208{1...Mf} Karena setiap atribut ordinal dapat memiliki jumlah state yang berbeda, diperlukan untuk memetakan rentang setiap atribut ke [0,0, 1.0] sehingga setiap atribut memiliki bobot yang sama. Perl melakukan normalisasi data dengan mengganti peringkat rifrif dengan $$ z _ { i f } = \\frac { r _ { i f } - 1 } { M _ { f } - 1 } $$ Dissimilarity kemudian dihitung dengan menggunakan ukuran jarak seperti atribut numerik dengan data yang baru setelah ditransformasi $ z _ { i f }$","title":"Mengukur Jarak Tipe Ordinal"},{"location":"tugas2/#menghitung-jarak-tipe-campuran","text":"Wilson, D. R., & Martinez, T. R. (1997). Improved heterogeneous distance functions. Journal of artificial intelligence research, 6, 1-34. Menghitung ketidaksamaan antara objek dengan atribut campuran yang berupa nominal, biner simetris, biner asimetris, numerik, atau ordinal yang ada pada kebanyakan databasae dapat dinyatakan dengan memproses semua tipe atribut secara bersamaan. Salah satu teknik tersebut menggabungkan atribut yang berbeda ke dalam matriks ketidaksamaan tunggal dan menyatakannya dengan skala interval antar [0,0,1.0][0,0,1.0]. Misalkan data berisi atribut pp tipe campuran. Ketidaksamaan (disimilarity ) antara objek ii dan jj dinyatakan dengan $$ d ( i , j ) = \\frac { \\sum _ { f = 1 } ^ { p } \\delta _ { i j } ^ { ( f ) } d _ { i j } ^ { ( f ) } } { \\sum _ { f = 1 } ^ { p } \\delta _ { i j } ^ { ( f ) } } $$ dimana \u03b4fij=0\u03b4ijf=0 - jika xifxif atau xjfxjf adalah hilang (i.e., tidak ada pengukuran dari atribut f untuk objek ii atau objek jj) jika xif=xjf=0xif=xjf=0 dan atribut ff adalah binary asymmetric, selain itu \u03b4fij=1\u03b4ijf=1 Kontribusi dari atribut ff untuk dissimilarity antara i dan j (yaitu.dfijdijf) dihitung bergantung pada tipenya, Jika ff adalah numerik, $$ d_{ij}^{f}=\\frac{ |x {if}-x {jf}|}{max_hx_{hf}-min_hx{hf}} $$ , di mana h menjalankan semua nilai objek yang tidak hilang untuk atribut f Jika ff adalah nominal atau binary,$d_{ij}^{f}=0 $jika xif=xjfxif=xjf, sebaliknya dfij=1dijf=1 Jika ff adalah ordinal maka hitung rangking rifrif dan $$ \\mathcal z_{if}=\\frac {r_{if}-1}{M_f-1} $$ , dan perlakukan zifzif sebagai numerik.","title":"Menghitung Jarak Tipe Campuran"},{"location":"tugas2/#contoh-program","text":"import pandas as pd pd.read_csv(\"hayes-roth.csv\") name hobby age educationallevel maritalstatus class 0 92 2 1 1 2 1 1 10 2 1 3 2 2 2 83 3 1 4 1 3 3 61 2 4 2 2 3 4 107 1 1 3 4 3 ... ... ... ... ... ... ... 127 44 1 1 4 3 3 128 40 2 1 2 1 1 129 90 1 2 1 2 2 130 21 1 2 2 1 2 131 9 3 1 1 2 1 132 rows \u00d7 6 columns","title":"Contoh Program"},{"location":"tugas2/#menghitung-jarak-numerik","text":"Numeric attribute adalah atribut kuantitatif, yaitu dapat dihitung banyaknya dan dapat diwakilkan dalam bilangan integer atau real. Numeric attribute dapat berupa skala interval(interval-scaled) atau skala-rasio(ration-scaled), kedua-duanya memiliki nilai mean, median, dan mode. Untuk numeric attribute interval-scaled tidak memiliki true zero-point(nilai nol yang sebenarnya), sedangkan yang ratio-scaled memiliki true zero-point. def chordDist(v1,v2,jenis): jumlah=0 normv1=0 normv2=0 for x in range (len(jenis)): normv1=normv1+(int(a.values.tolist()[v1][jenis[x]])**2) normv2=normv2+(int(a.values.tolist()[v2][jenis[x]])**2) jumlah=jumlah+(int(a.values.tolist()[v1][jenis[x]])*int(a.values.tolist()[v2][jenis[x]])) return ((2-(2*jumlah/(normv1*normv2)))**0.5)","title":"Menghitung Jarak Numerik"},{"location":"tugas2/#menghitung-jarak-binary","text":"Binary attribute adalah nominal atribut yang hanya memiliki dua kategori atau keadaan yaitu 0 dan 1. 0 berarti tidak ada dan 1 berarti ada. Binary attribute biasanya diartikan sebagai Boolean jika kedua keadaannya adalah true(benar) dan false(salah). Binary attribute bisa simetris(symmetric) dan bisa asimetris(assymmetric). Simetris jika kedua nilainya bernilai sama/setimbang harganya, sehingga tidak bisa diberi kode 0 atau 1, sedangkan asimetris kedua nilainya tidak setimbang harganya, sehingga dapat diberi kode 0 atau 1. def binaryDist(v1,v2,jenis): q=0 r=0 s=0 t=0 for x in range (len(jenis)): if (int(a.values.tolist()[v1][jenis[x]]))==1 and (int(a.values.tolist()[v2][jenis[x]]))==1: q=q+1 elif (int(a.values.tolist()[v1][jenis[x]]))==1 and (int(a.values.tolist()[v2][jenis[x]]))==2: r=r+1 elif (int(a.values.tolist()[v1][jenis[x]]))==2 and (int(a.values.tolist()[v2][jenis[x]]))==1: s=s+1 else: t=t+1 return ((r+s)/(q+r+s+t))","title":"Menghitung Jarak Binary"},{"location":"tugas2/#menghitung-jarak-ordinal","text":"Ordinal attribute adalah atribut dengan nilai-nilai yang kemungkinan memiliki urutan yang mempunyai arti atau tingkatan(ranking), akan tetapi jarak antara nilai-nilainya tidak diketahui. Ordinal attribute berguna untuk mendaftarkan taksiran suatu kualitas yang tidak bisa diukur secara obyektif. Oleh karena itu ordinal attribute biasanya digunakan dalam survey atau rating. def ordDist(v1,v2,jenis): jumlah=0 for x in range (len(jenis)): z1=int(a.values.tolist()[v1][jenis[x]])-1 z2=int(a.values.tolist()[v2][jenis[x]])-1 jumlah=jumlah+chordDist(z1,z2,jenis) return (jumlah)","title":"Menghitung Jarak Ordinal"},{"location":"tugas2/#atribut-nominal","text":"Nominal attribute adalah atribut yang nilainya berupa simbol-simbol atau nama-nama benda. Dan nilainya tidak memiliki urutan yang memiliki arti. Pada nominal attribute, operasi matematika pada nilai-nilainya tidak berarti. Sehingga, tidak masuk akal untuk mencari nilai mean(rata-rata)nya atau nilai median(tengah) nya, kecuali untuk mode(nilai yang paling sering muncul)nya. Sumber : https://github.com/mulaab/datamining/tree/master/memahami-data https://datamining10041.wordpress.com/2012/03/25/atribut-nominal-biner-ordinal-dan-numerik/","title":"Atribut Nominal"},{"location":"tugas3/","text":"Tugas 3 Seleksi Fitur Seleksi fitur merupakan teknik untuk mengurangi dimensi atribut. Pengurangan dimensi tersebut dilakukan untuk mendapatkan atribut-atribut yang relevan dan tidak berlebihan sehingga dapat mempercepat proses klasifikasi dan dapat meningkatkan akurasi dari algoritme klasifikasi. (Arifin, 2015). Metode seleksi fitur yang biasa digunakan dalam penelitian adalah Information gain. Information Gain Information Gain merupakan metode seleksi fitur paling sederhana dengan melakukan perangkingan atribut dan banyak digunakan dalam aplikasi kategorisasi teks, analisis data microarray dan analisis data citra. (Chormunge & Jena, 2016). Information Gain dapat membantu mengurangi noise yang disebabkan oleh fitur-fitur yang tidak relevan. Information Gain mendeteksi fitur-fitur yang paling banyak memiliki informasi berdasarkan kelas tertentu. Penentuan atribut terbaik dilakukan dengan menghitung nilai entropy terlebih dahulu. Entropy Entropy merupakan ukuran ketidakpastian kelas dengan menggunakan probabilitas kejadian atau atribut tertentu. (Shaltout, et al., 2014). Rumus untuk menghitung entropy ditunjukkan pada persamaan (1). Setelah mendapatkan nilai entropy, maka perhitungan Information Gain dapat dilakukan dengan menggunakan persamaan (2). (Firmahsyah & Gantini, 2016). $$ E(T) = \\sum_{i=1}^n {-P_i\\log{P_i}} $$ Dengan n adalah jumlah nilai yang ada pada kelas klasifikasi dan Pi merupakan jumlah sampel untuk kelas i. $$ \\operatorname{Gain}(S, A) = \\operatorname{Entropy}(S) - \\sum_{v\\in{A}} \\frac{S_{X,v}}{S} E(S_{X,v}) $$ Dengan A merupakan atribut, v adalah nilai yang mungkin untuk atribut A, Values(A) adalah himpunan nilai-nilai yang mungkin untuk A, |Sv| adalah jumlah seluruh sampel data dan Entropy(Sv) adalah entropy untuk sampel-sampel yang memiliki nilai v. Contoh program Data tentang kondisi cuaca : from pandas import * from IPython.display import HTML, display from tabulate import tabulate from math import log from sklearn.feature_selection import mutual_info_classif def table(df): display(HTML(tabulate(df, tablefmt='html', headers='keys', showindex=False))) df = read_csv('featureselection.csv',usecols = [0,1,2,3,4], sep=';') table(df) Tampilan : outlook temperature humidity windy play sunny hot high False no sunny hot high True no overcast hot high False yes rainy mild high False yes rainy cool normal False yes rainy cool normal True no overcast cool normal True yes sunny mild high False no sunny cool normal False yes rainy mild normal False yes sunny mild normal True yes overcast mild high True yes overcast hot normal False yes rainy mild high True no Menghitung Entropy def findEntropy(column): rawGroups = df.groupby(column) targetGroups = [[key, len(data), len(data)/df[column].size] for key,data in rawGroups] targetGroups = DataFrame(targetGroups, columns=['play', 'count', 'probability']) return sum([-x*log(x,2) for x in targetGroups['probability']]), targetGroups, rawGroups entropyTarget, groupTargets, _ = findEntropy('play') table(groupTargets) print('Entropy =', entropyTarget) Tampilan : play count probability no 5 0.357143 yes 9 0.642857 Entropy = 0.9402859586706309 Menghitung Gain def findGain(column): entropyOutlook, groupOutlooks, rawOutlooks = findEntropy(column) table(groupOutlooks) gain = entropyTarget-sum(len(data)/len(df)*sum(-x/len(data)*log(x/len(data),2) for x in data.groupby('play').size()) for key,data in rawOutlooks) print(\"Gain of\",column,\"is\",gain) return gain gains = [[x,findGain(x)] for x in ['outlook','temperature','humidity','windy']] Tampilan : value count probability overcast 4 0.285714 rainy 5 0.357143 sunny 5 0.357143 gain of outlook is 0.2467498197744391 value count probability cool 4 0.285714 hot 4 0.285714 mild 6 0.428571 gain of temperature is 0.029222565658954647 value count probability high 7 0.5 normal 7 0.5 gain of humidity is 0.15183550136234136 value count probability False 8 0.571429 True 6 0.428571 gain of windy is 0.04812703040826927 Ranking Fitur Hasil dari pengurutan gain dari yang terbesar ke yang terkecil, digunakan untuk menghilangkan fitur yang kurang penting / relevan. table(DataFrame(gains, columns=[\"Feature\", \"Gain Score\"]).sort_values(\"Gain Score\")[::-1]) Tampilan : Feature Gain Score outlook 0.24675 humidity 0.151836 windy 0.048127 temperature 0.0292226 Sumber : https://www.researchgate.net/publication/326571453_Seleksi_Fitur_Information_Gain_untuk_Klasifikasi_Penyakit_Jantung_Menggunakan_Kombinasi_Metode_K-Nearest_Neighbor_dan_Naive_Bayes MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Tugas 3"},{"location":"tugas3/#tugas-3","text":"","title":"Tugas 3"},{"location":"tugas3/#seleksi-fitur","text":"Seleksi fitur merupakan teknik untuk mengurangi dimensi atribut. Pengurangan dimensi tersebut dilakukan untuk mendapatkan atribut-atribut yang relevan dan tidak berlebihan sehingga dapat mempercepat proses klasifikasi dan dapat meningkatkan akurasi dari algoritme klasifikasi. (Arifin, 2015). Metode seleksi fitur yang biasa digunakan dalam penelitian adalah Information gain.","title":"Seleksi Fitur"},{"location":"tugas3/#information-gain","text":"Information Gain merupakan metode seleksi fitur paling sederhana dengan melakukan perangkingan atribut dan banyak digunakan dalam aplikasi kategorisasi teks, analisis data microarray dan analisis data citra. (Chormunge & Jena, 2016). Information Gain dapat membantu mengurangi noise yang disebabkan oleh fitur-fitur yang tidak relevan. Information Gain mendeteksi fitur-fitur yang paling banyak memiliki informasi berdasarkan kelas tertentu. Penentuan atribut terbaik dilakukan dengan menghitung nilai entropy terlebih dahulu.","title":"Information Gain"},{"location":"tugas3/#entropy","text":"Entropy merupakan ukuran ketidakpastian kelas dengan menggunakan probabilitas kejadian atau atribut tertentu. (Shaltout, et al., 2014). Rumus untuk menghitung entropy ditunjukkan pada persamaan (1). Setelah mendapatkan nilai entropy, maka perhitungan Information Gain dapat dilakukan dengan menggunakan persamaan (2). (Firmahsyah & Gantini, 2016). $$ E(T) = \\sum_{i=1}^n {-P_i\\log{P_i}} $$ Dengan n adalah jumlah nilai yang ada pada kelas klasifikasi dan Pi merupakan jumlah sampel untuk kelas i. $$ \\operatorname{Gain}(S, A) = \\operatorname{Entropy}(S) - \\sum_{v\\in{A}} \\frac{S_{X,v}}{S} E(S_{X,v}) $$ Dengan A merupakan atribut, v adalah nilai yang mungkin untuk atribut A, Values(A) adalah himpunan nilai-nilai yang mungkin untuk A, |Sv| adalah jumlah seluruh sampel data dan Entropy(Sv) adalah entropy untuk sampel-sampel yang memiliki nilai v.","title":"Entropy"},{"location":"tugas3/#contoh-program","text":"Data tentang kondisi cuaca : from pandas import * from IPython.display import HTML, display from tabulate import tabulate from math import log from sklearn.feature_selection import mutual_info_classif def table(df): display(HTML(tabulate(df, tablefmt='html', headers='keys', showindex=False))) df = read_csv('featureselection.csv',usecols = [0,1,2,3,4], sep=';') table(df) Tampilan : outlook temperature humidity windy play sunny hot high False no sunny hot high True no overcast hot high False yes rainy mild high False yes rainy cool normal False yes rainy cool normal True no overcast cool normal True yes sunny mild high False no sunny cool normal False yes rainy mild normal False yes sunny mild normal True yes overcast mild high True yes overcast hot normal False yes rainy mild high True no Menghitung Entropy def findEntropy(column): rawGroups = df.groupby(column) targetGroups = [[key, len(data), len(data)/df[column].size] for key,data in rawGroups] targetGroups = DataFrame(targetGroups, columns=['play', 'count', 'probability']) return sum([-x*log(x,2) for x in targetGroups['probability']]), targetGroups, rawGroups entropyTarget, groupTargets, _ = findEntropy('play') table(groupTargets) print('Entropy =', entropyTarget) Tampilan : play count probability no 5 0.357143 yes 9 0.642857 Entropy = 0.9402859586706309 Menghitung Gain def findGain(column): entropyOutlook, groupOutlooks, rawOutlooks = findEntropy(column) table(groupOutlooks) gain = entropyTarget-sum(len(data)/len(df)*sum(-x/len(data)*log(x/len(data),2) for x in data.groupby('play').size()) for key,data in rawOutlooks) print(\"Gain of\",column,\"is\",gain) return gain gains = [[x,findGain(x)] for x in ['outlook','temperature','humidity','windy']] Tampilan : value count probability overcast 4 0.285714 rainy 5 0.357143 sunny 5 0.357143 gain of outlook is 0.2467498197744391 value count probability cool 4 0.285714 hot 4 0.285714 mild 6 0.428571 gain of temperature is 0.029222565658954647 value count probability high 7 0.5 normal 7 0.5 gain of humidity is 0.15183550136234136 value count probability False 8 0.571429 True 6 0.428571 gain of windy is 0.04812703040826927","title":"Contoh program"},{"location":"tugas3/#ranking-fitur","text":"Hasil dari pengurutan gain dari yang terbesar ke yang terkecil, digunakan untuk menghilangkan fitur yang kurang penting / relevan. table(DataFrame(gains, columns=[\"Feature\", \"Gain Score\"]).sort_values(\"Gain Score\")[::-1]) Tampilan : Feature Gain Score outlook 0.24675 humidity 0.151836 windy 0.048127 temperature 0.0292226 Sumber : https://www.researchgate.net/publication/326571453_Seleksi_Fitur_Information_Gain_untuk_Klasifikasi_Penyakit_Jantung_Menggunakan_Kombinasi_Metode_K-Nearest_Neighbor_dan_Naive_Bayes MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Ranking Fitur"}]}